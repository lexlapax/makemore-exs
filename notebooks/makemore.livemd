# makemore

```elixir
my_app_root = Path.join(__DIR__, "..")

Mix.install(
  [
    {:makemore, path: my_app_root, env: :dev},
    {:kino, "~> 0.7.0"},
    {:vega_lite, "~> 0.1.6"},
    {:kino_vega_lite, "~> 0.1.6"}
  ],
  # config_path: Path.join(my_app_root, "config/config.exs"),
  lockfile: Path.join(my_app_root, "mix.lock")
)

# Mix.install([
#   {:nx, "~> 0.4.0"},
#   {:torchx, "~> 0.4.0"},
# ])
```

## convenience setup and imports

```elixir
import IEx.Helpers
alias VegaLite, as: Vl
```

```elixir
filepath = Path.join([__DIR__, "../", "names.txt"])
words = File.read!(filepath) |> String.split("\n")
```

```elixir
Enum.slice(words, 0..9)
```

```elixir
length(words)
```

```elixir
# max word length assumed to be 255
Enum.reduce(words, 255, fn x, acc -> min(acc, String.length(x)) end)
String.length(Enum.min_by(words, fn x -> String.length(x) end))
```

```elixir
Enum.reduce(words, 0, fn x, acc -> max(acc, String.length(x)) end)
String.length(Enum.max_by(words, fn x -> String.length(x) end))
```

```elixir
b =
  Enum.reduce(
    List.flatten(
      # Enum.slice(words, 0..9) do
      for w <- words do
        chs = String.graphemes("." <> w <> ".")

        Enum.zip(
          chs,
          (
            [_ | t] = chs
            t
          )
        )
      end
    ),
    %{},
    fn bigram, acc ->
      exist = Map.get(acc, bigram)

      case exist do
        nil -> Map.put(acc, bigram, 1)
        _ -> Map.put(acc, bigram, exist + 1)
      end
    end
  )
```

```elixir
# Map.to_list(b)
Enum.sort(Map.to_list(b), fn x, y ->
  {_, xval} = x
  {_, yval} = y
  xval >= yval
end)
```

```elixir
chars = MapSet.new(String.codepoints(Enum.join(words, "")))

stoi =
  Enum.reduce(chars, %{"." => 0}, fn x, acc ->
    Map.put(acc, x, map_size(acc))
  end)

itos = Map.new(stoi, fn {key, val} -> {val, key} end)
```

```elixir
# whether to work on characters in bigram map or integers 0 = ., a =1 etc
ints = true
words = Makemore.Utils.file_to_words(filepath)
numchars = map_size(Makemore.Utils.stoi(Makemore.Utils.uniq_char(words)))
## see below vallist1 and vallist is the same
_ = Makemore.Bigram.sorted_desc(Makemore.Bigram.bigram_map(words, ints))
# {pos_list, vallist1}  = Makemore.Bigram.bgram_to_mat(sbm_pos)
sbm_chars = Makemore.Bigram.sorted_desc(Makemore.Bigram.bigram_map(words, ints))
{_label_list, vallist} = Makemore.Bigram.bgram_to_mat(sbm_chars)
# vallist1 == vallist is true
```

```elixir
nt = Nx.reshape(Nx.tensor(vallist, type: :u16), {numchars, numchars}, names: [:rows, :cols])
# nt = Makemore.Bigram.create_tensor(filepath)
Nx.to_heatmap(nt)
```

```elixir
charkeys = stoi |> Map.keys() |> Enum.sort()
# numkeys=itos |> Map.keys() |> Enum.sort()
# Enum.into(Enum.zip(charkeys, numkeys), %{})
data =
  Nx.to_batched(nt, 1)
  |> Enum.to_list()
  |> Enum.map(fn x -> Nx.to_flat_list(x) end)
  # |> Enum.zip(charkeys)
  # |> Enum.into(%{})
  # |> Map.new(fn {key, val} -> {val, key} end) end)
  |> Enum.zip(charkeys)
  |> Enum.into(%{})
  |> Map.new(fn {key, val} -> {val, key} end)

# |> JSON.encode!
```

```elixir
#Kino.DataTable.new(data)
vl = Vl.new(height: 400, width: 400)
  |> Vl.
  |> Vl.data_from_values(data)
  |> Vl.mark(:rect)
  |> Vl.

```

## play

```elixir

```
